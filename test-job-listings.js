const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

// Donn√©es de test pour cr√©er quelques offres d'emploi
const testJobs = [
  {
    title: 'D√©veloppeur React Senior',
    description: 'Nous recherchons un d√©veloppeur React senior pour rejoindre notre √©quipe dynamique. Vous travaillerez sur des projets innovants utilisant les derni√®res technologies.',
    requirements: 'React, TypeScript, Node.js, 5+ ans d\'exp√©rience',
    responsibilities: 'D√©veloppement de nouvelles fonctionnalit√©s, code review, mentoring des juniors',
    benefits: 'T√©l√©travail flexible, formation continue, mutuelle premium',
    location: 'Paris, France',
    employmentType: 'full_time',
    experienceLevel: 'senior',
    remotePolicy: 'hybrid',
    salaryMin: '55000',
    salaryMax: '75000',
    currency: 'EUR',
    positions: 2,
    isUrgent: false,
    isFeatured: true,
    isActive: true
  },
  {
    title: 'Designer UX/UI Junior',
    description: 'Rejoignez notre √©quipe design pour cr√©er des exp√©riences utilisateur exceptionnelles. Poste id√©al pour un junior motiv√©.',
    requirements: 'Figma, Adobe Creative Suite, portfolio requis',
    responsibilities: 'Cr√©ation de maquettes, tests utilisateurs, collaboration avec les d√©veloppeurs',
    benefits: 'Formation, √©quipement fourni, ambiance startup',
    location: 'Lyon, France',
    employmentType: 'full_time',
    experienceLevel: 'junior',
    remotePolicy: 'on_site',
    salaryMin: '35000',
    salaryMax: '45000',
    currency: 'EUR',
    positions: 1,
    isUrgent: true,
    isFeatured: false,
    isActive: true
  },
  {
    title: 'D√©veloppeur Full Stack Freelance',
    description: 'Mission freelance pour d√©velopper une application web compl√®te. Projet passionnant avec une startup en croissance.',
    requirements: 'JavaScript, Python, bases de donn√©es, autonomie',
    responsibilities: 'D√©veloppement frontend et backend, d√©ploiement, maintenance',
    benefits: 'Tarif attractif, flexibilit√©, projet innovant',
    location: 'Remote',
    employmentType: 'freelance',
    experienceLevel: 'mid',
    remotePolicy: 'remote',
    salaryMin: '400',
    salaryMax: '600',
    currency: 'EUR',
    positions: 1,
    isUrgent: false,
    isFeatured: false,
    isActive: true
  },
  {
    title: 'Stage D√©veloppement Mobile',
    description: 'Stage de 6 mois dans une √©quipe mobile pour d√©velopper des applications iOS et Android.',
    requirements: 'React Native ou Flutter, motivation, √©tudes en informatique',
    responsibilities: 'D√©veloppement d\'applications mobiles, tests, documentation',
    benefits: 'Encadrement, formation, possibilit√© d\'embauche',
    location: 'Toulouse, France',
    employmentType: 'internship',
    experienceLevel: 'entry',
    remotePolicy: 'hybrid',
    salaryMin: '800',
    salaryMax: '1200',
    currency: 'EUR',
    positions: 2,
    isUrgent: false,
    isFeatured: false,
    isActive: true
  },
  {
    title: 'Lead Developer',
    description: 'Poste de lead developer pour encadrer une √©quipe de 5 d√©veloppeurs et d√©finir l\'architecture technique.',
    requirements: 'Leadership, architecture logicielle, 8+ ans d\'exp√©rience',
    responsibilities: 'Management technique, architecture, code review, recrutement',
    benefits: 'Salaire attractif, stock-options, t√©l√©travail total',
    location: 'Bordeaux, France',
    employmentType: 'full_time',
    experienceLevel: 'lead',
    remotePolicy: 'flexible',
    salaryMin: '70000',
    salaryMax: '90000',
    currency: 'EUR',
    positions: 1,
    isUrgent: true,
    isFeatured: true,
    isActive: true
  }
];

async function createTestJobs() {
  console.log('üöÄ Cr√©ation d\'offres d\'emploi de test...\n');

  for (let i = 0; i < testJobs.length; i++) {
    const job = testJobs[i];
    try {
      console.log(`üìù Cr√©ation de l'offre ${i + 1}/${testJobs.length}: ${job.title}`);
      
      const response = await axios.post(`${API_BASE_URL}/jobs`, job, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      if (response.status === 201 || response.status === 200) {
        console.log(`   ‚úÖ Offre cr√©√©e avec succ√®s (ID: ${response.data.id})`);
      }
    } catch (error) {
      if (error.response?.status === 401) {
        console.log(`   ‚ö†Ô∏è  Authentification requise pour cr√©er l'offre "${job.title}"`);
      } else if (error.response?.status === 400) {
        console.log(`   ‚ùå Erreur de validation pour "${job.title}":`, error.response?.data?.message);
      } else {
        console.log(`   ‚ùå Erreur pour "${job.title}":`, error.response?.status, error.response?.data?.message);
      }
    }
  }
}

async function testJobListingAPI() {
  console.log('\nüîç Test de l\'API de r√©cup√©ration des offres...\n');

  try {
    const response = await axios.get(`${API_BASE_URL}/jobs`, {
      headers: {
        'Content-Type': 'application/json'
      }
    });

    console.log(`‚úÖ API de r√©cup√©ration fonctionnelle`);
    console.log(`üìä Nombre d'offres r√©cup√©r√©es: ${response.data.length}`);
    
    if (response.data.length > 0) {
      console.log('\nüìã Aper√ßu des offres:');
      response.data.slice(0, 3).forEach((job, index) => {
        console.log(`   ${index + 1}. ${job.title} - ${job.company?.name || 'Entreprise non sp√©cifi√©e'}`);
        console.log(`      üìç ${job.location || 'Localisation non sp√©cifi√©e'}`);
        console.log(`      üíº ${job.employmentType} - ${job.experienceLevel}`);
        console.log(`      üí∞ ${job.salaryMin || '?'} - ${job.salaryMax || '?'} ${job.currency || 'EUR'}`);
        console.log('');
      });
    }

  } catch (error) {
    console.log('‚ùå Erreur lors de la r√©cup√©ration des offres:');
    console.log('   Status:', error.response?.status);
    console.log('   Message:', error.response?.data?.message || error.message);
  }
}

async function testJobFiltering() {
  console.log('\nüîé Test des filtres...\n');

  const filterTests = [
    {
      name: 'Filtrage par type de contrat (full_time)',
      params: { employmentType: 'full_time' }
    },
    {
      name: 'Filtrage par niveau d\'exp√©rience (senior)',
      params: { experienceLevel: 'senior' }
    },
    {
      name: 'Filtrage par politique de t√©l√©travail (remote)',
      params: { remotePolicy: 'remote' }
    },
    {
      name: 'Recherche par mot-cl√© (React)',
      params: { search: 'React' }
    },
    {
      name: 'Filtrage par localisation (Paris)',
      params: { location: 'Paris' }
    }
  ];

  for (const test of filterTests) {
    try {
      const queryParams = new URLSearchParams(test.params).toString();
      const response = await axios.get(`${API_BASE_URL}/jobs?${queryParams}`, {
        headers: {
          'Content-Type': 'application/json'
        }
      });

      console.log(`‚úÖ ${test.name}: ${response.data.length} r√©sultat(s)`);
    } catch (error) {
      console.log(`‚ùå ${test.name}: Erreur ${error.response?.status}`);
    }
  }
}

async function runAllTests() {
  console.log('üéØ TESTS DU COMPOSANT JOB LISTINGS\n');
  console.log('=' .repeat(50));
  
  await createTestJobs();
  await testJobListingAPI();
  await testJobFiltering();
  
  console.log('\n' + '=' .repeat(50));
  console.log('üèÅ Tests termin√©s !');
  console.log('\nüìã R√©sum√©:');
  console.log('   - Cr√©ation d\'offres de test (peut n√©cessiter une authentification)');
  console.log('   - Test de l\'API de r√©cup√©ration des offres');
  console.log('   - Test des filtres de recherche');
  console.log('\nüöÄ Le composant JobListings devrait maintenant fonctionner avec des donn√©es !');
  console.log('\nüí° Pour tester compl√®tement:');
  console.log('   1. D√©marrez le serveur frontend: npm run dev');
  console.log('   2. Allez sur /dashboard/candidate');
  console.log('   3. Cliquez sur l\'onglet "Annonces"');
  console.log('   4. Testez la recherche et les filtres');
}

runAllTests();
