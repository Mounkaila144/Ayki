const axios = require('axios');

const API_BASE_URL = 'http://localhost:3001';

// Donn√©es de test pour la cr√©ation d'un utilisateur recruteur
const testRecruiter = {
  phone: '90123456', // Num√©ro du Niger valide
  password: 'TestPassword123!',
  firstName: 'Test',
  lastName: 'Recruiter',
  userType: 'recruiter'
};

// Donn√©es de test pour la cr√©ation d'une entreprise
const testCompany = {
  name: 'Test Company',
  description: 'Une entreprise de test',
  industry: 'Technology',
  size: 'medium',
  location: 'Paris, France',
  website: 'https://test-company.com'
};

// Donn√©es de test pour la cr√©ation d'une offre d'emploi
const testJobOffer = {
  title: 'D√©veloppeur Full Stack',
  description: 'Nous recherchons un d√©veloppeur full stack exp√©riment√©',
  requirements: 'React, Node.js, TypeScript',
  location: 'Paris',
  employmentType: 'full-time',
  experienceLevel: 'mid',
  remotePolicy: 'hybrid',
  salaryMin: '45000',
  salaryMax: '65000',
  currency: 'EUR',
  isUrgent: false,
  isFeatured: false
};

// Donn√©es de test pour la mise √† jour
const updateJobData = {
  title: 'Senior D√©veloppeur Full Stack',
  description: 'Nous recherchons un d√©veloppeur full stack senior',
  salaryMin: '55000',
  salaryMax: '75000',
  experienceLevel: 'senior',
  isUrgent: true,
  isFeatured: true
};

async function testJobUpdate() {
  let authToken = null;
  let jobId = null;

  try {
    console.log('üöÄ D√©but du test de mise √† jour des offres d\'emploi...\n');

    // 1. Inscription du recruteur
    console.log('1. Inscription du recruteur...');
    try {
      await axios.post(`${API_BASE_URL}/auth/signup`, testRecruiter);
      console.log('‚úÖ Recruteur inscrit avec succ√®s');
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚ÑπÔ∏è  Recruteur d√©j√† existant, on continue...');
      } else {
        throw error;
      }
    }

    // 2. Connexion du recruteur
    console.log('2. Connexion du recruteur...');
    const loginResponse = await axios.post(`${API_BASE_URL}/auth/signin`, {
      phone: testRecruiter.phone,
      password: testRecruiter.password
    });
    authToken = loginResponse.data.access_token;
    console.log('‚úÖ Connexion r√©ussie');

    // 3. Cr√©ation d'une entreprise (si n√©cessaire)
    console.log('3. Cr√©ation de l\'entreprise...');
    try {
      await axios.post(`${API_BASE_URL}/companies`, testCompany, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      console.log('‚úÖ Entreprise cr√©√©e avec succ√®s');
    } catch (error) {
      if (error.response?.status === 409) {
        console.log('‚ÑπÔ∏è  Entreprise d√©j√† existante, on continue...');
      } else {
        console.log('‚ö†Ô∏è  Erreur lors de la cr√©ation de l\'entreprise:', error.response?.data?.message || error.message);
      }
    }

    // 4. Cr√©ation d'une offre d'emploi
    console.log('4. Cr√©ation de l\'offre d\'emploi...');
    const createJobResponse = await axios.post(`${API_BASE_URL}/jobs`, testJobOffer, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    jobId = createJobResponse.data.id;
    console.log('‚úÖ Offre d\'emploi cr√©√©e avec succ√®s, ID:', jobId);
    console.log('   Titre:', createJobResponse.data.title);
    console.log('   Salaire:', createJobResponse.data.salaryMin, '-', createJobResponse.data.salaryMax, createJobResponse.data.currency);

    // 5. Test de mise √† jour de l'offre d'emploi (le test principal)
    console.log('\nüéØ 5. Test de mise √† jour de l\'offre d\'emploi...');
    console.log('   Donn√©es √† mettre √† jour:', JSON.stringify(updateJobData, null, 2));
    
    const updateResponse = await axios.patch(`${API_BASE_URL}/jobs/${jobId}`, updateJobData, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Mise √† jour r√©ussie !');
    console.log('   Nouveau titre:', updateResponse.data.title);
    console.log('   Nouveau salaire:', updateResponse.data.salaryMin, '-', updateResponse.data.salaryMax, updateResponse.data.currency);
    console.log('   Niveau d\'exp√©rience:', updateResponse.data.experienceLevel);
    console.log('   Urgent:', updateResponse.data.isUrgent);
    console.log('   En vedette:', updateResponse.data.isFeatured);

    // 6. V√©rification que les donn√©es ont bien √©t√© mises √† jour
    console.log('\n6. V√©rification des donn√©es mises √† jour...');
    const getJobResponse = await axios.get(`${API_BASE_URL}/jobs/${jobId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    const updatedJob = getJobResponse.data;
    console.log('‚úÖ Donn√©es r√©cup√©r√©es avec succ√®s');
    
    // V√©rifications
    const checks = [
      { field: 'title', expected: updateJobData.title, actual: updatedJob.title },
      { field: 'salaryMin', expected: updateJobData.salaryMin, actual: updatedJob.salaryMin },
      { field: 'salaryMax', expected: updateJobData.salaryMax, actual: updatedJob.salaryMax },
      { field: 'experienceLevel', expected: updateJobData.experienceLevel, actual: updatedJob.experienceLevel },
      { field: 'isUrgent', expected: updateJobData.isUrgent, actual: updatedJob.isUrgent },
      { field: 'isFeatured', expected: updateJobData.isFeatured, actual: updatedJob.isFeatured }
    ];

    let allChecksPass = true;
    checks.forEach(check => {
      const passed = check.expected == check.actual; // Utilisation de == pour g√©rer les conversions de type
      console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${check.field}: ${check.actual} ${passed ? '(OK)' : `(attendu: ${check.expected})`}`);
      if (!passed) allChecksPass = false;
    });

    if (allChecksPass) {
      console.log('\nüéâ SUCC√àS ! Toutes les v√©rifications sont pass√©es.');
      console.log('   Le probl√®me de l\'erreur 500 lors de la mise √† jour a √©t√© r√©solu !');
    } else {
      console.log('\n‚ö†Ô∏è  Certaines v√©rifications ont √©chou√©.');
    }

  } catch (error) {
    console.error('\n‚ùå ERREUR lors du test:');
    console.error('   Status:', error.response?.status);
    console.error('   Message:', error.response?.data?.message || error.message);
    console.error('   D√©tails:', error.response?.data);
    
    if (error.response?.status === 500) {
      console.error('\nüí° L\'erreur 500 persiste. V√©rifiez les logs du serveur pour plus de d√©tails.');
    }
  } finally {
    // Nettoyage optionnel
    if (jobId && authToken) {
      try {
        console.log('\nüßπ Nettoyage: suppression de l\'offre de test...');
        await axios.delete(`${API_BASE_URL}/jobs/${jobId}`, {
          headers: { Authorization: `Bearer ${authToken}` }
        });
        console.log('‚úÖ Offre supprim√©e');
      } catch (error) {
        console.log('‚ö†Ô∏è  Erreur lors de la suppression:', error.response?.data?.message || error.message);
      }
    }
  }
}

// Ex√©cution du test
testJobUpdate();
