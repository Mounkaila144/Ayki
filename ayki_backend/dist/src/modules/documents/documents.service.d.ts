import { Repository } from 'typeorm';
import { Document } from '../../entities/document.entity';
import { UserProfile } from '../../entities/user-profile.entity';
export declare class DocumentsService {
    private documentRepository;
    private profileRepository;
    constructor(documentRepository: Repository<Document>, profileRepository: Repository<UserProfile>);
    uploadDocument(file: Express.Multer.File, body: any, userId?: string): Promise<{
        url: string;
        length: number;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): Document | undefined;
        push(...items: Document[]): number;
        concat(...items: ConcatArray<Document>[]): Document[];
        concat(...items: (Document | ConcatArray<Document>)[]): Document[];
        join(separator?: string): string;
        reverse(): Document[];
        shift(): Document | undefined;
        slice(start?: number, end?: number): Document[];
        sort(compareFn?: ((a: Document, b: Document) => number) | undefined): Document[];
        splice(start: number, deleteCount?: number): Document[];
        splice(start: number, deleteCount: number, ...items: Document[]): Document[];
        unshift(...items: Document[]): number;
        indexOf(searchElement: Document, fromIndex?: number): number;
        lastIndexOf(searchElement: Document, fromIndex?: number): number;
        every<S extends Document>(predicate: (value: Document, index: number, array: Document[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: Document, index: number, array: Document[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: Document, index: number, array: Document[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: Document, index: number, array: Document[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: Document, index: number, array: Document[]) => U, thisArg?: any): U[];
        filter<S extends Document>(predicate: (value: Document, index: number, array: Document[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: Document, index: number, array: Document[]) => unknown, thisArg?: any): Document[];
        reduce(callbackfn: (previousValue: Document, currentValue: Document, currentIndex: number, array: Document[]) => Document): Document;
        reduce(callbackfn: (previousValue: Document, currentValue: Document, currentIndex: number, array: Document[]) => Document, initialValue: Document): Document;
        reduce<U>(callbackfn: (previousValue: U, currentValue: Document, currentIndex: number, array: Document[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: Document, currentValue: Document, currentIndex: number, array: Document[]) => Document): Document;
        reduceRight(callbackfn: (previousValue: Document, currentValue: Document, currentIndex: number, array: Document[]) => Document, initialValue: Document): Document;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: Document, currentIndex: number, array: Document[]) => U, initialValue: U): U;
        find<S extends Document>(predicate: (value: Document, index: number, obj: Document[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: Document, index: number, obj: Document[]) => unknown, thisArg?: any): Document | undefined;
        findIndex(predicate: (value: Document, index: number, obj: Document[]) => unknown, thisArg?: any): number;
        fill(value: Document, start?: number, end?: number): Document[];
        copyWithin(target: number, start: number, end?: number): Document[];
        entries(): ArrayIterator<[number, Document]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<Document>;
        includes(searchElement: Document, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: Document, index: number, array: Document[]) => U | readonly U[], thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): Document | undefined;
        findLast<S extends Document>(predicate: (value: Document, index: number, array: Document[]) => value is S, thisArg?: any): S | undefined;
        findLast(predicate: (value: Document, index: number, array: Document[]) => unknown, thisArg?: any): Document | undefined;
        findLastIndex(predicate: (value: Document, index: number, array: Document[]) => unknown, thisArg?: any): number;
        toReversed(): Document[];
        toSorted(compareFn?: ((a: Document, b: Document) => number) | undefined): Document[];
        toSpliced(start: number, deleteCount: number, ...items: Document[]): Document[];
        toSpliced(start: number, deleteCount?: number): Document[];
        with(index: number, value: Document): Document[];
        [Symbol.iterator](): ArrayIterator<Document>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            at?: boolean | undefined;
            findLast?: boolean | undefined;
            findLastIndex?: boolean | undefined;
            toReversed?: boolean | undefined;
            toSorted?: boolean | undefined;
            toSpliced?: boolean | undefined;
            with?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
        };
    }>;
    create(createDocumentDto: any): Promise<Document[]>;
    findAll(): Promise<Document[]>;
    findOne(id: string): Promise<Document | null>;
    update(id: string, updateDocumentDto: any): Promise<import("typeorm").UpdateResult>;
    remove(id: string): Promise<import("typeorm").DeleteResult>;
}
