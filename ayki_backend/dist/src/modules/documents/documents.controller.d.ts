import { DocumentsService } from './documents.service';
export declare class DocumentsController {
    private readonly documentsService;
    constructor(documentsService: DocumentsService);
    uploadFile(file: Express.Multer.File, body: any, req: any): Promise<{
        url: string;
        length: number;
        toString(): string;
        toLocaleString(): string;
        toLocaleString(locales: string | string[], options?: Intl.NumberFormatOptions & Intl.DateTimeFormatOptions): string;
        pop(): import("../../entities").Document | undefined;
        push(...items: import("../../entities").Document[]): number;
        concat(...items: ConcatArray<import("../../entities").Document>[]): import("../../entities").Document[];
        concat(...items: (import("../../entities").Document | ConcatArray<import("../../entities").Document>)[]): import("../../entities").Document[];
        join(separator?: string): string;
        reverse(): import("../../entities").Document[];
        shift(): import("../../entities").Document | undefined;
        slice(start?: number, end?: number): import("../../entities").Document[];
        sort(compareFn?: ((a: import("../../entities").Document, b: import("../../entities").Document) => number) | undefined): import("../../entities").Document[];
        splice(start: number, deleteCount?: number): import("../../entities").Document[];
        splice(start: number, deleteCount: number, ...items: import("../../entities").Document[]): import("../../entities").Document[];
        unshift(...items: import("../../entities").Document[]): number;
        indexOf(searchElement: import("../../entities").Document, fromIndex?: number): number;
        lastIndexOf(searchElement: import("../../entities").Document, fromIndex?: number): number;
        every<S extends import("../../entities").Document>(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => value is S, thisArg?: any): this is S[];
        every(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => unknown, thisArg?: any): boolean;
        some(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => unknown, thisArg?: any): boolean;
        forEach(callbackfn: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => void, thisArg?: any): void;
        map<U>(callbackfn: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => U, thisArg?: any): U[];
        filter<S extends import("../../entities").Document>(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => value is S, thisArg?: any): S[];
        filter(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => unknown, thisArg?: any): import("../../entities").Document[];
        reduce(callbackfn: (previousValue: import("../../entities").Document, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => import("../../entities").Document): import("../../entities").Document;
        reduce(callbackfn: (previousValue: import("../../entities").Document, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => import("../../entities").Document, initialValue: import("../../entities").Document): import("../../entities").Document;
        reduce<U>(callbackfn: (previousValue: U, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => U, initialValue: U): U;
        reduceRight(callbackfn: (previousValue: import("../../entities").Document, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => import("../../entities").Document): import("../../entities").Document;
        reduceRight(callbackfn: (previousValue: import("../../entities").Document, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => import("../../entities").Document, initialValue: import("../../entities").Document): import("../../entities").Document;
        reduceRight<U>(callbackfn: (previousValue: U, currentValue: import("../../entities").Document, currentIndex: number, array: import("../../entities").Document[]) => U, initialValue: U): U;
        find<S extends import("../../entities").Document>(predicate: (value: import("../../entities").Document, index: number, obj: import("../../entities").Document[]) => value is S, thisArg?: any): S | undefined;
        find(predicate: (value: import("../../entities").Document, index: number, obj: import("../../entities").Document[]) => unknown, thisArg?: any): import("../../entities").Document | undefined;
        findIndex(predicate: (value: import("../../entities").Document, index: number, obj: import("../../entities").Document[]) => unknown, thisArg?: any): number;
        fill(value: import("../../entities").Document, start?: number, end?: number): import("../../entities").Document[];
        copyWithin(target: number, start: number, end?: number): import("../../entities").Document[];
        entries(): ArrayIterator<[number, import("../../entities").Document]>;
        keys(): ArrayIterator<number>;
        values(): ArrayIterator<import("../../entities").Document>;
        includes(searchElement: import("../../entities").Document, fromIndex?: number): boolean;
        flatMap<U, This = undefined>(callback: (this: This, value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => U | readonly U[], thisArg?: This | undefined): U[];
        flat<A, D extends number = 1>(this: A, depth?: D | undefined): FlatArray<A, D>[];
        at(index: number): import("../../entities").Document | undefined;
        findLast<S extends import("../../entities").Document>(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => value is S, thisArg?: any): S | undefined;
        findLast(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => unknown, thisArg?: any): import("../../entities").Document | undefined;
        findLastIndex(predicate: (value: import("../../entities").Document, index: number, array: import("../../entities").Document[]) => unknown, thisArg?: any): number;
        toReversed(): import("../../entities").Document[];
        toSorted(compareFn?: ((a: import("../../entities").Document, b: import("../../entities").Document) => number) | undefined): import("../../entities").Document[];
        toSpliced(start: number, deleteCount: number, ...items: import("../../entities").Document[]): import("../../entities").Document[];
        toSpliced(start: number, deleteCount?: number): import("../../entities").Document[];
        with(index: number, value: import("../../entities").Document): import("../../entities").Document[];
        [Symbol.iterator](): ArrayIterator<import("../../entities").Document>;
        [Symbol.unscopables]: {
            [x: number]: boolean | undefined;
            length?: boolean | undefined;
            toString?: boolean | undefined;
            toLocaleString?: boolean | undefined;
            pop?: boolean | undefined;
            push?: boolean | undefined;
            concat?: boolean | undefined;
            join?: boolean | undefined;
            reverse?: boolean | undefined;
            shift?: boolean | undefined;
            slice?: boolean | undefined;
            sort?: boolean | undefined;
            splice?: boolean | undefined;
            unshift?: boolean | undefined;
            indexOf?: boolean | undefined;
            lastIndexOf?: boolean | undefined;
            every?: boolean | undefined;
            some?: boolean | undefined;
            forEach?: boolean | undefined;
            map?: boolean | undefined;
            filter?: boolean | undefined;
            reduce?: boolean | undefined;
            reduceRight?: boolean | undefined;
            find?: boolean | undefined;
            findIndex?: boolean | undefined;
            fill?: boolean | undefined;
            copyWithin?: boolean | undefined;
            entries?: boolean | undefined;
            keys?: boolean | undefined;
            values?: boolean | undefined;
            includes?: boolean | undefined;
            flatMap?: boolean | undefined;
            flat?: boolean | undefined;
            at?: boolean | undefined;
            findLast?: boolean | undefined;
            findLastIndex?: boolean | undefined;
            toReversed?: boolean | undefined;
            toSorted?: boolean | undefined;
            toSpliced?: boolean | undefined;
            with?: boolean | undefined;
            [Symbol.iterator]?: boolean | undefined;
            readonly [Symbol.unscopables]?: boolean | undefined;
        };
    }>;
    create(createDocumentDto: any): Promise<import("../../entities").Document[]>;
    findAll(): Promise<import("../../entities").Document[]>;
    findOne(id: string): Promise<import("../../entities").Document | null>;
    update(id: string, updateDocumentDto: any): Promise<import("typeorm").UpdateResult>;
    remove(id: string): Promise<import("typeorm").DeleteResult>;
}
