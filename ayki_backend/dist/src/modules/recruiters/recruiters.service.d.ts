import { Repository } from 'typeorm';
import { User } from '../../entities/user.entity';
import { UserProfile } from '../../entities/user-profile.entity';
import { UserSkill } from '../../entities/user-skill.entity';
import { Experience } from '../../entities/experience.entity';
import { Education } from '../../entities/education.entity';
import { Application } from '../../entities/application.entity';
import { Bookmark } from '../../entities/bookmark.entity';
export declare class RecruitersService {
    private userRepository;
    private profileRepository;
    private userSkillRepository;
    private experienceRepository;
    private educationRepository;
    private applicationRepository;
    private bookmarkRepository;
    constructor(userRepository: Repository<User>, profileRepository: Repository<UserProfile>, userSkillRepository: Repository<UserSkill>, experienceRepository: Repository<Experience>, educationRepository: Repository<Education>, applicationRepository: Repository<Application>, bookmarkRepository: Repository<Bookmark>);
    getRecruiterStats(recruiterId: string): Promise<{
        totalCandidates: number;
        bookmarkedCandidates: number;
        activeJobOffers: number;
        totalApplications: number;
        interviewsScheduled: number;
        hiredCandidates: number;
    }>;
    searchCandidates(recruiterId: string, filters: any): Promise<{
        data: ({
            id: string;
            firstName: string;
            lastName: string;
            title: string;
            location: string;
            summary: string;
            skills: string[];
            experience: string;
            avatar: string | null;
            salary: string;
            availability: string;
            rating: number | null;
            lastActive: string;
            education: string;
            company: string;
            isBookmarked: boolean;
            matchScore: number;
            profileCompletion: number;
        } | {
            email: string;
            phone: string;
            experiences: Experience[];
            educations: Education[];
            documents: import("../../entities").Document[];
            id: string;
            firstName: string;
            lastName: string;
            title: string;
            location: string;
            summary: string;
            skills: string[];
            experience: string;
            avatar: string | null;
            salary: string;
            availability: string;
            rating: number | null;
            lastActive: string;
            education: string;
            company: string;
            isBookmarked: boolean;
            matchScore: number;
            profileCompletion: number;
        })[];
        total: number;
        page: number;
        totalPages: number;
        limit: number;
    }>;
    getBookmarkedCandidates(recruiterId: string): Promise<({
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    } | {
        email: string;
        phone: string;
        experiences: Experience[];
        educations: Education[];
        documents: import("../../entities").Document[];
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    })[]>;
    toggleCandidateBookmark(recruiterId: string, candidateId: string): Promise<{
        bookmarked: boolean;
        message: string;
    }>;
    getCandidateProfile(recruiterId: string, candidateId: string): Promise<{
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    } | {
        email: string;
        phone: string;
        experiences: Experience[];
        educations: Education[];
        documents: import("../../entities").Document[];
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    }>;
    private transformUserToCandidate;
    private getAvailabilityLabel;
    private getLastActiveLabel;
}
