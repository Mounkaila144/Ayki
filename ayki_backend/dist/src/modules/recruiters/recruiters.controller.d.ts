import { RecruitersService } from './recruiters.service';
export declare class RecruitersController {
    private readonly recruitersService;
    constructor(recruitersService: RecruitersService);
    getMyStats(req: any): Promise<{
        totalCandidates: number;
        bookmarkedCandidates: number;
        activeJobOffers: number;
        totalApplications: number;
        interviewsScheduled: number;
        hiredCandidates: number;
    }>;
}
export declare class CandidatesController {
    private readonly recruitersService;
    constructor(recruitersService: RecruitersService);
    searchCandidates(query: any, req: any): Promise<{
        data: ({
            id: string;
            firstName: string;
            lastName: string;
            title: string;
            location: string;
            summary: string;
            skills: string[];
            experience: string;
            avatar: string | null;
            salary: string;
            availability: string;
            rating: number | null;
            lastActive: string;
            education: string;
            company: string;
            isBookmarked: boolean;
            matchScore: number;
            profileCompletion: number;
        } | {
            email: string;
            phone: string;
            experiences: import("../../entities").Experience[];
            educations: import("../../entities").Education[];
            documents: import("../../entities").Document[];
            id: string;
            firstName: string;
            lastName: string;
            title: string;
            location: string;
            summary: string;
            skills: string[];
            experience: string;
            avatar: string | null;
            salary: string;
            availability: string;
            rating: number | null;
            lastActive: string;
            education: string;
            company: string;
            isBookmarked: boolean;
            matchScore: number;
            profileCompletion: number;
        })[];
        total: number;
        page: number;
        totalPages: number;
        limit: number;
    }>;
    getBookmarkedCandidates(req: any): Promise<({
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    } | {
        email: string;
        phone: string;
        experiences: import("../../entities").Experience[];
        educations: import("../../entities").Education[];
        documents: import("../../entities").Document[];
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    })[]>;
    toggleBookmark(candidateId: string, req: any): Promise<{
        bookmarked: boolean;
        message: string;
    }>;
    getCandidateProfile(candidateId: string, req: any): Promise<{
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    } | {
        email: string;
        phone: string;
        experiences: import("../../entities").Experience[];
        educations: import("../../entities").Education[];
        documents: import("../../entities").Document[];
        id: string;
        firstName: string;
        lastName: string;
        title: string;
        location: string;
        summary: string;
        skills: string[];
        experience: string;
        avatar: string | null;
        salary: string;
        availability: string;
        rating: number | null;
        lastActive: string;
        education: string;
        company: string;
        isBookmarked: boolean;
        matchScore: number;
        profileCompletion: number;
    }>;
}
